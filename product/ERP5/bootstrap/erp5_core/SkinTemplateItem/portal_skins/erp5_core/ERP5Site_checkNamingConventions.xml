<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="PythonScript" module="Products.PythonScripts.PythonScript"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>Script_magic</string> </key>
            <value> <int>3</int> </value>
        </item>
        <item>
            <key> <string>_bind_names</string> </key>
            <value>
              <object>
                <klass>
                  <global name="NameAssignments" module="Shared.DC.Scripts.Bindings"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>_asgns</string> </key>
                        <value>
                          <dictionary>
                            <item>
                                <key> <string>name_container</string> </key>
                                <value> <string>container</string> </value>
                            </item>
                            <item>
                                <key> <string>name_context</string> </key>
                                <value> <string>context</string> </value>
                            </item>
                            <item>
                                <key> <string>name_m_self</string> </key>
                                <value> <string>script</string> </value>
                            </item>
                            <item>
                                <key> <string>name_subpath</string> </key>
                                <value> <string>traverse_subpath</string> </value>
                            </item>
                          </dictionary>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>_body</string> </key>
            <value> <string encoding="cdata"><![CDATA[

# This script checks for naming validity.\n
#\n
# NOTE: Do not rely on this script too much! After all, human must take care.\n
\n
# TODO:\n
# - Add more abbriviation words.\n
# - Check language dependencies (e.g. "Account Of" should not be allowed, because it cannot be\n
#   translated naturally for other languages).\n
# - Check skin names.\n
# - Check script names (from skin folders and workflows).\n
import re\n
ABBRIVIATION_WORD_LIST = ( \'ID\', \'URL\', \'URI\', \'VAT\', \'FAX\', \'GAP\', \'IBAN\', \'BBAN\', \'EAN\', \'BOM\', \'BIC\'\n
                         , \'CSV\', \'SVN\', \'UBM\', \'VPN\', \'CAD\', \'ERP5\', \'PDM\', \'HTML\', \'SQL\',\n
                         \'ZODB\', \'UOM\', \'TALES\', \'RAM\', \'MIME\', \'RSS\', \'PDF\', \'DMS\', \'CRM\', \'PO\', \n
                         \'VCS\', \'TSV\', \'KM\', \'OAUTH\', \'VADS\', \'ODT\', \'CTX\', \'SMS\', \'UID\'\n
                         )\n
ABBRIVIATION_WORD_DICT = dict([(word, 1) for word in ABBRIVIATION_WORD_LIST])\n
\n
# List of words that do not need to be titlecased\n
LOWERCASE_WORD_LIST = (\'g\', \'cm\', \'kg\', \'%\', \'/\', \'...\', \'m\', \'-\', \'g/m2\', \'iCalendar\')\n
LOWERCASE_WORD_DICT = dict([(word, 1) for word in LOWERCASE_WORD_LIST])\n
\n
# List of allowed characters, usefull to detect non-english strings\n
ALLOWED_CHARS = "abcdefghijklmnopqrstuvwxyz0123456789%/. ()-_?&\'#"\n
\n
def checkField(folder, form, field):\n
  """\n
    Generic function that test the validity of ERP5Form fields.\n
  """\n
  path = \'/\'.join([folder.id, form.id])\n
  error_message = checkTitle(path, field.id, field.title(), field)\n
  template_field = getFieldFromProxyField(field)\n
  if template_field is None:\n
    error_message = "Could not get a field from a proxy field %s" % field.id\n
    return error_message\n
  elif template_field.meta_type == \'ListBox\':\n
    a = template_field.getListMethodName()    \n
  if isListBox(field):\n
    path = \'/\'.join([path, \'listbox\'])\n
    for id, title in field.get_value(\'columns\'):\n
      error_message += checkTitle(path, \'columns\', title, field)\n
    for id, title in field.get_value(\'all_columns\'):\n
      error_message += checkTitle(path, \'all_columns\', title, field)\n
\n
    if (a!= None and not a.endswith(\'List\')):\n
      if a not in [\'portal_catalog\', \'searchFolder\', \'objectValues\', \'contentValues\']:\n
        error_message = "%s : %s : %r Bad Naming Convention\\n" % (path, id, a)\n
  return error_message\n
\n
def isListBox(field):\n
  template_field = getFieldFromProxyField(field)\n
  if template_field is None:\n
    return False\n
  elif template_field.meta_type == \'ListBox\':\n
    return True\n
  return False\n
\n
def getFieldFromProxyField(field):\n
  if field.meta_type == \'ProxyField\':\n
    template_field = field.getRecursiveTemplateField()\n
    return template_field\n
  return field      \n
\n
def titlecase(s):\n
  return re.sub(r"[A-Za-z]+(\'[A-Za-z]+)?",\n
                   lambda mo: mo.group(0)[0].upper() +\n
                              mo.group(0)[1:].lower(),\n
                   s)\n
\n
def checkTitle(path, id, title, field=None):\n
  """\n
    Generic function that test the validity of a title.\n
  """\n
  error_message = \'\'\n
\n
  if (field is not None and not field.get_value(\'hidden\') and \\\n
   (title is None or len(title.strip()) == 0)) or (field is None and (title is None or len(title.strip()) == 0)):\n
    return "%s : %s : can\'t be empty\\n" % (path, id)\n
\n
  for c in title:\n
    if c.lower() not in ALLOWED_CHARS:\n
      return "%s : %s : %r character not allowed\\n" % (path, id, c)\n
\n
  word_list = title.split(\' \')\n
  for word in word_list:\n
    word = word.strip(\'()\')\n
\n
    if word.isdigit():\n
      continue\n
\n
    if word.upper() in ABBRIVIATION_WORD_DICT:\n
      if not word.isupper():\n
        error_message += \'%s : %s : %r is not upper case even though it is an abbriviation\\n\' % (path, id, word)\n
    elif word.endswith(\'s\') and word[:-1].upper() in ABBRIVIATION_WORD_DICT:\n
      if not word[:-1].isupper():\n
        error_message += \'%s : %s : %r is not upper case even though it is an abbriviation\\n\' % (path, id, word)\n
    elif "-" in word and word.split("-")[0].upper() in ABBRIVIATION_WORD_DICT:\n
      if not word.split("-")[0].isupper():\n
        error_message += \'%s : %s : %r is not upper case even though it is an abbriviation\\n\' % (path, id, word)\n
    else:\n
      if (word.capitalize()!= word and titlecase(word)!= word) and word not in LOWERCASE_WORD_DICT:\n
        error_message += \'%s : %s : %r is not titlecased\\n\' % (path, id, word)\n
  if len(word_list) > 1 and word_list[-1].upper() == \'LIST\' and word_list[-2].upper() != \'PACKING\':\n
    error_message += \'%s : %s : %r is a jargon\\n\' % (path, id, title)\n
  return error_message\n
\n
\n
\n
message_list = []\n
\n
\n
# Test portal_skins content\n
for folder in context.portal_skins.objectValues(spec=(\'Folder\',)):\n
  if not folder.id.startswith(\'erp5_\'):\n
    continue\n
  for form in folder.objectValues(spec=(\'ERP5 Form\',)):\n
    message = checkTitle(\'/\'.join([folder.id, form.id]), \'Title of the Form itself\', form.title)\n
    if message:\n
      message_list.append(message)\n
    for group in form.get_groups():\n
      if group == \'hidden\':\n
        continue\n
      for field in form.get_fields_in_group(group):\n
        if field.get_value(\'hidden\') or field.id == \'matrixbox\':\n
          continue\n
        message = checkField(folder, form, field)\n
        if message:\n
          message_list.append(message)\n
\n
\n
# Test worflow related stuff\n
for wf in context.portal_workflow.objectValues():\n
\n
  # Test workflow states\n
  wf_states = wf.states\n
  message = \'\'\n
  if wf_states not in (None, (), [], \'\'):\n
    for state in wf_states.objectValues() :\n
      message += checkTitle(\'/\'.join([\'portal_workflow\', wf.id, \'states\', state.id]), \'title\', state.title)\n
    if message:\n
      message_list.append(message)\n
\n
#   # Test workflow states\n
#   wf_scripts = wf.scripts\n
#   message = \'\'\n
#   if wf_scripts not in (None, (), [], \'\'):\n
#     for script in wf_scripts.objectValues():\n
#       message += checkTitle(\'/\'.join([\'portal_workflow\', wf.id, \'scripts\', script.id]), \'id\', script.id)\n
#     if message:\n
#       message_list.append(message)\n
\n
\n
# Test portal types\n
portal_types = [x for x in context.portal_types.objectValues() if x.id not in \n
                  [\'Application Id Generator\', \'Conceptual Id Generator\', \'DateTime Divergence Tester\',\n
                  \'Distributed Ram Cache\', \'Fax\', \'Fax Message\', \'Id Tool\', \'OAuth Tool\', \'OOo Document\',\n
                   \'Ram Cache\', \'SQL Non Continuous Increasing Id Generator\', \'Url Registry Tool\',\n
                   \'ZODB Continuous Increasing Id Generator\']]\n
for ptype in portal_types:\n
  pt_title = ptype.title\n
  pt_id = ptype.id\n
  message = \'\'\n
  if pt_title not in (None, \'\'):\n
    message += checkTitle(\'/\'.join([\'portal_types\', pt_id]), \'title\', pt_title)\n
  else:\n
    message += checkTitle(\'/\'.join([\'portal_types\', pt_id]), \'id\', pt_id)\n
  if message:\n
    message_list.append(message)\n
\n
\n
# Output the result as HTML with http links to objects\n
if html_output :\n
  print "<html>"\n
  for message in message_list:\n
    for sub_message in message.split("\\n"):\n
      if len(sub_message) > 0:\n
        form, text = sub_message.split(\':\', 1)\n
        print \'<a href="%s/manage_workspace">%s</a> : %s<br/>\' % (form.strip(), form, text)\n
      else:\n
        print "<br/>"\n
  return printed\n
\n
\n
return ("%d problems found :\\n\\n" % len(message_list)) + \'\\n\'.join(message_list)\n


]]></string> </value>
        </item>
        <item>
            <key> <string>_params</string> </key>
            <value> <string>html_output=1</string> </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>ERP5Site_checkNamingConventions</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
